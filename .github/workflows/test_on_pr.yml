on:
  push:
    branches: [ main ]
  pull_request:
jobs:
  format:
    name: Formatting (with black)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - name: Cache python environment
        id: cache-env
        uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-formatting-black-20.8b1
      - name: Install black
        if: steps.cache-env.outputs.cache-hit != 'true'
        run: |
          pip install black==20.8b1
      - name: Black Format Check
        run: |
          black --check acapy_plugin_toolbox tests int/tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache python environment
        id: cache-env
        uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-testing-${{ matrix.python-version }} #-${{ hashFiles('poetry.lock') }}
      - name: Install poetry   # (use poetry?)
        if: steps.cache-env.outputs.cache-hit != 'true'
        run: |
          pip install poetry==1.1.5
      - name: Setup poetry environment
        id: setup-poetry-env
        run: |
          poetry env use $(which python)
          echo "::set-output name=poetry-env::$(poetry env info --path)"
      - name: Cache poetry environment
        id: cache-poetry
        uses: actions/cache@v2
        with:
          path: ${{ steps.setup-poetry-env.outputs.poetry-env }}
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }} #-${{ hashFiles('poetry.lock') }}
      - name: Install dependencies
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: |
          poetry install
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          poetry run pytest

    # - name: Pytest (with coverage)
    #   run: |
    #     env/bin/coverage run --branch --source=aries_staticagent -m pytest

    # - name: Coverage Report
    #   run: |
    #     env/bin/coverage report -m
    #     env/bin/coverage html

    # - name: Upload Coverage Report
    #   uses: actions/upload-artifact@v1.0.0
    #   with:
    #     name: coverage-report
    #     path: htmlcov
